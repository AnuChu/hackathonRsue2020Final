import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {faChevronLeft} from "@fortawesome/free-solid-svg-icons";
import React from "react";
import FadeInSection from "../FadeIn/FadeIn";

export default function Article() {
    return (
        <FadeInSection key={1}>
            <div className={"article-page"}>
                <div className={"prev"}>
                    <FontAwesomeIcon icon={faChevronLeft}/> Назад
                </div>

                <div className={"author"}>

                    <img src={"/images/person/4.svg"} alt={""}/> <span className={"author-name"}> Офицеров Владислав Эдуардович</span>
                </div>
                <div className={"block-article"}>
                    <div className={"data"}>
                        <img src={"/images/icon/calendar.svg"} width={"20px"}
                             height={"17px"}/> 28.11.2020
                    </div>

                    <div className={"mtitle"}>
                        Python, каким бы я хотел его видеть
                    </div>
                    <p>
                        Всем известно, что мне не нравится третья версия Python и то, в каком направлении развивается
                        этот язык программирования. За последние несколько месяцев я получил много писем с вопросами о
                        моём видении развития Python и решил поделиться своими мыслями с сообществом, чтобы, по
                        возможности, дать пищу для размышлений будущим разработчикам языка.<br/><br/>
                        Можно сказать совершенно точно: Python не является идеальным языком программирования. На мой
                        взгляд, основные проблемы вытекают из особенностей интерпретатора и мало связаны с самим языком,
                        однако все эти нюансы интерпретатора постепенно становятся частью самого языка, и поэтому они
                        так важны.
                        <br/><br/>
                        Можно сказать совершенно точно: Python не является идеальным языком программирования. На мой
                        взгляд, основные проблемы вытекают из особенностей интерпретатора и мало связаны с самим языком,
                        однако все эти нюансы интерпретатора постепенно становятся частью самого языка, и поэтому они
                        так важны.

                        Я хочу начать наш разговор с одной странности интерпретатора (слоты) и закончить его самой
                        большой ошибкой архитектуры языка. По сути, эта серия постов является исследованием решений,
                        заложенных в архитектуре интерпретатора, и их влияния как на интерпретатор, так и на сам язык. Я
                        считаю, что с точки зрения общего дизайна языка такие статьи будут выглядеть гораздо интереснее,
                        чем просто высказывание мыслей по улучшению Python.
                    </p>

                    <div className={"minititle"}>
                        Язык и реализация
                    </div>
                    <p>
                        Этот раздел был добавлен мной после написания всей статьи. На мой взгляд, некоторые разработчики
                        упускают из виду факт взаимосвязи Python как языка и CPython как интерпретатора, и считают, что
                        они независимы друг от друга. Да, существует спецификация языка, однако во многих случаях она
                        либо описывает работу интерпретатора, либо попросту умалчивает некоторые моменты.
                        <br/><br/>
                        При таком подходе неявные детали реализации интерпретатора напрямую влияют на архитектуру языка,
                        и даже заставляют другие реализации языка Python перенимать некоторые вещи. Так, например, PyPy
                        ничего не знает о слотах (насколько мне известно), однако вынужден работать так, будто слоты
                        являются его частью.
                        <br/><br/>
                        Слоты (Slots)<br/>
                        На мой взгляд, одной из самых больших проблем языка является идиотская система слотов. Я говорю
                        не о конструкции __slots__, я имею в виду слоты внутреннего типа для специальных методов. Эти
                        слоты являются «особенностью» языка, которую многие упускают из виду, потому что мало кому
                        приходится с этим сталкиваться. При этом само существование слотов является самой большой
                        проблемой языка Python.
                        <br/><br/>
                        Итак, что такое слот? Это побочный эффект внутренней реализации интерпретатора. Каждый
                        программист, пишущий на Python, знает о «магических методах», таких как __add__: эти методы
                        начинаются и заканчиваются двумя символами подчёркивания, между которыми заключено их название.
                        Каждый разработчик знает, что если написать в коде a + b, то интерпретатором будет вызвана
                        функция a.__add__(b).
                    </p>
                </div>
            </div>
        </FadeInSection>
    )
}
